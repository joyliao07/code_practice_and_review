Sources:

https://www.techopedia.com/definition/3235/object-oriented-programming-oop 

https://www.python-course.eu/object_oriented_programming.php 

https://www.techopedia.com/definition/28106/polymorphism-general-programming 

1. Encapsulation: 

    Each objectâ€™s implementation and state are hidden behind well-defined boundaries. 

    If an identifier is only preceded by one underscore character, it is a protected member. Protected members can be accessed like public members from outside of class. 
    It can be seen in the following example. Let's save the following class as encapsulation.py:

        class Encapsulation(object):
            def __init__(self, a, b, c):
                self.public = a
                self._protected = b
                self.__private = c

    The following interactive sessions shows the behaviour of public, protected and private members:

        >>> from encapsulation import Encapsulation
        >>> x = Encapsulation(11,13,17)
        >>> x.public
        11
        >>> x._protected
        13
        >>> x._protected = 23
        >>> x._protected
        23
        >>> x.__private
        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        AttributeError: 'Encapsulation' object has no attribute '__private'
        >>> 

    Notation        Name            Behaviour
    Public          name            Can be accessed from inside and outside
    Protected       _name           Like a public member, but they shouldn't be directly accessed from outside
    Private         __nrivate       Can't be seen and accessed from outside
























